{% import 'macros/comments.jinja2' as comments %}

{# available vars: visitor_name, visitor_email, threads #}

<div class="plugin_localcomments" style="border: 2px dashed blue;">
{# client-side script to manage comment display and form behavior #}
  <script lang="javascript"><!--
    var action = null;
    var formhtml = null;
    function delete_all_forms() { 
        jQuery('div.plugin_localcomments div.reply').each(function() {
            if ($(this).closest('.issue').length === 0) {
                // this is the space for new topics, with a separate link
                $(this).html('<a class="btn btn-small reply" href="#">Add a new topic</a>');
            } else {
                // this is the prompt to add comments to an existing topic
                $(this).html('<a class="btn btn-small reply" href="#">Add a comment</a>');
            }
            $(this).find('a.reply').unbind('click').click(function() {
                $formHolder = $(this).parent();
                delete_all_forms();
                $formHolder.html(formhtml); 
                capture_form(); 
                return false;
            });
        });
    }
    function capture_form() {
        // bind and modify widgets 
        jQuery('div.plugin_localcomments a.msg-close').unbind('click').click(function(){
            delete_all_forms();
            return false;
        });

        // adjust UI for issues versus comments
        var threadParentID = 0;
        var $parentIssueContainer = $('.plugin_localcomments form').closest('li.issue');
        if ($parentIssueContainer.length > 0) {
            threadParentID = $parentIssueContainer.find('div:eq(0)').attr('id').split('r')[1];
        }
        var isThreadStarter = threadParentID == 0;
        if (isThreadStarter) {
            jQuery('div.plugin_localcomments select[name=feedback_type]').show();
            jQuery('div.plugin_localcomments select[name=issue_title]').show();
        } else {
            jQuery('div.plugin_localcomments select[name=feedback_type]').hide();
            jQuery('div.plugin_localcomments select[name=issue_title]').hide();
        }
        // always hide expertise checkbox and surrounding label (not currently needed)
        jQuery('div.plugin_localcomments label.expertise-option').hide();

        // show/hide some fields based on feedback type
        var $referenceURLField = jQuery('div.plugin_localcomments input[name="reference_url"]'); 
        $referenceURLField.hide();
        jQuery('div.plugin_localcomments select[name="feedback_type"]').unbind('change').change(function(){
            switch (jQuery(this).val()) {
                case 'Suggest a phylogeny to incorporate':
                    $referenceURLField.attr('placeholder',"Provide a database reference or published article (URL or DOI)");
                    $referenceURLField.show();
                    break;
                case 'Correction to relationships in the synthetic tree':
                case 'Correction to names (taxonomy)':
                case 'Extinct/extant issue (taxonomy)':
                    $referenceURLField.attr('placeholder',"Provide a supporting article or web site (URL or DOI)");
                    $referenceURLField.show();
                    break;
                default:
                    $referenceURLField.attr('placeholder',"...");
                    $referenceURLField.hide();
            }
        });
        // convert a "naked" DOI to an URL, where possible
        $referenceURLField.unbind('blur').bind('blur', function() {
            var $doiField = $(this);
            $doiField.val( DOItoURL($doiField.val()) );
        });

        // update the Login link, if shown
        if (typeof(fixLoginLinks) === 'function') {
            fixLoginLinks();
        }

        function validateFeedbackForm(options) {
            // Return true (if all inputs are valid), or false
            if (!options) options = {VERBOSE: false};
            var $form = $('div.plugin_localcomments form:eq(0)');
            var prompt = "Please provide data for all visible fields";
            var problemsFound = false;
            // validate form fields based on feedback type
            var $visitorNameField = $form.find('input[name="visitor_name"]'); 
            if ($visitorNameField.is(':visible') && ($.trim($visitorNameField.val()) === '')) {
                //prompt = "Please enter your name (and preferably an email address) so we can stay in touch.";
                problemsFound = true;
            }
            var $fbTypeField = $form.find('select[name="feedback_type"]'); 
            if ($fbTypeField.is(':visible') && ($.trim($fbTypeField.val()) === '')) {
                //prompt = "Please choose a feedback type for this topic.";
                problemsFound = true;
            }
            var $titleField = $form.find('input[name="issue_title"]'); 
            if ($titleField.is(':visible') && ($.trim($titleField.val()) === '')) {
                //prompt = "Please give this topic a title.";
                problemsFound = true;
            }
            var $bodyField = $form.find('textarea[name="body"]'); 
            if ($.trim($bodyField.val()) === '') {
                //prompt = "Please enter some text for this "+ (isThreadStarter ? 'issue' : 'comment') +".";
                problemsFound = true;
            }
            var $referenceURLField = $form.find('input[name="reference_url"]'); 
            if ($referenceURLField.is(':visible') && ($.trim($referenceURLField.val()) === '')) {
                //prompt = "Please provide a supporting reference (DOI or URL).";
                problemsFound = true;
            }

            if (problemsFound && options.VERBOSE) {
                // Show an alert to prompt corrective action
                alert(prompt);
            }

            // return true only if all's well
            return !(problemsFound);
        }
        function updateFeedbackButton(evt) {
            var $btn = jQuery('div.plugin_localcomments form:eq(0) :submit');
            if (validateFeedbackForm({VERBOSE: false})) {
                $btn.removeClass('disabled');
            } else {
                $btn.addClass('disabled');
            }
        }
        // update now, and after any change to input widgets
        updateFeedbackButton();
        jQuery('div.plugin_localcomments :input')
            .unbind('change.validation keyup.validation')
            .bind('change.validation keyup.validation', updateFeedbackButton);

        jQuery('div.plugin_localcomments :submit').unbind('click').click(function(){
            var $form = jQuery(this).closest('form');

            if (!validateFeedbackForm({VERBOSE: true})) {
                // something's wrong
                return false;
            }

            if (window.opener) {
                /* This window was opened by another page! Copy its URL to the 'url' field
                 * This is probably OneZoom, or our curation tool, or some other site using
                 * OpenTree data. We'll group these issues by URL.
                 */
                $form.find('input[name="url"]').val( window.opener.location.href );
            }

            jQuery.post(action,
                {
                   ////$'thread_parent_id': form.find('input[name="thread_parent_id"]').val(),
                   'issue_or_comment': (isThreadStarter ? 'issue' : 'comment'),
                   'thread_parent_id': threadParentID,    ///$form.parent().prev().attr('id').split('r')[1], 
                   'synthtree_id': $form.find('input[name="synthtree_id"]').val(),
                   'synthtree_node_id': $form.find('input[name="synthtree_node_id"]').val(),
                   'sourcetree_id': $form.find('input[name="sourcetree_id"]').val(),
                   'ottol_id': $form.find('input[name="ottol_id"]').val(),
                   'target_node_label': $form.find('input[name="target_node_label"]').val(),
                   'url': $form.find('input[name="url"]').val(),
                   'title': $form.find('input[name="issue_title"]').val(),
                   'body': $form.find('textarea[name="body"]').val(),
                   'feedback_type': $form.find('select[name="feedback_type"]').val(),
                   'reference_url': $referenceURLField.is(':visible') ? $form.find('input[name="reference_url"]').val() : '',
                   'claimed_expertise': $form.find(':checkbox[name="claimed_expertise"]').is(':checked'),
                   'visitor_name': $form.find('input[name="visitor_name"]').val(),
                   'visitor_email': $form.find('input[name="visitor_email"]').val()
                },
                function(data,r){ 
                   if(data) { 
                       var $refreshArea;
                       if (isThreadStarter) {
                           $refreshArea = $form.parent().nextAll('ul');
                           // add the new comment (LI) to the top of the list
                           $refreshArea.prepend(data);
                       } else {
                           $refreshArea = $form.parent().prevAll('ul');
                           // add the new comment (LI) to the end of the list
                           $refreshArea.append(data);
                       } 
                       $form.find('textarea[name="body"]').val('');
                       //$form.find('input[name="thread_parent_id"]').val('0');
                       plugin_localcomments_init(); 
                       delete_all_forms();
                   }
                },
                'html'
            );
            return false;
        });
    }

    function plugin_localcomments_init() {
      jQuery('div.plugin_localcomments .toggle').unbind('click').click(function(){
         var $toggle = $(this);
         var $parentIssue = $toggle.closest('li.issue');
         var $collapsibleTargets = $parentIssue.find('ul').eq(0).add($parentIssue.find('div.reply'));
         $collapsibleTargets.slideToggle(250);  // duration in ms
         if ($toggle.text().indexOf('Show') == -1) {
            $toggle.text('Show/add comments');
         } else {
            $toggle.text('Hide comments');
         }
         return false;
      });
      jQuery('div.plugin_localcomments .delete').unbind('click').click(function(){
        delete_all_forms();
        var $commentDiv = jQuery(this).closest('.msg-wrapper');
        var $msgItem = $commentDiv.closest('li');
        var issueOrComment = ($msgItem.is('.issue') ? 'issue' : 'comment');
        jQuery.post(
            action,    // WAS: action+'/delete',
            {
                'thread_parent_id': 'delete',
                'comment_id': $commentDiv.attr('id').split('r')[1],
                'issue_or_comment': issueOrComment
            },
            function(data,r){
                $msgItem.fadeOut(function() {$(this).remove();});
            }
        );
        return false;
      });
    }
    jQuery(document).ready(function() {
      action = jQuery('div.plugin_localcomments form').attr('action');  
      formhtml = jQuery('div.plugin_localcomments form').parent().html();
      delete_all_forms();  // important! creates .reply buttons before init() below
      plugin_localcomments_init();
    });
  //--></script>
  <div class="reply">
      <form action="/opentree/plugin_localcomments" enctype="multipart/form-data" method="post">
{% if True: %}
      {# anonymous users should see be encouraged to login or add a name-or-email to their comments #}
          <a class="login-logout reply" href="/opentree/user/login">Login</a> 
            or <input id="visitor_name" name="visitor_name" placeholder="Enter your name" type="text" value="" /> 
          <input id="visitor_email" name="visitor_email" placeholder="Your email (visible on GitHub)" type="text" value="" />
          <br />
{% endif %}
          <select name="feedback_type" style="width: 100%; margin-right: -4px;">
              <option selected="selected" value="">What kind of feedback is this?</option>
              <option value="General feedback">General feedback</option>
              <option value="Correction to relationships in the synthetic tree">Correction to relationships in the synthetic tree</option>
              <option value="Suggest a phylogeny to incorporate">Suggest a phylogeny to incorporate</option>
              <option value="Correction to names (taxonomy)">Correction to names (taxonomy)</option>
              <option value="Extinct/extant issue (taxonomy)">Extinct/extant issue (taxonomy)</option>
              <option value="Bug report (website behavior)">Bug report (website behavior)</option>
              <option value="New feature request">New feature request</option>
          </select>
          <label class="expertise-option" style="float: right;">
              <input name="claimed_expertise" type="checkbox" value="on" /> I claim expertise in this area
          </label>
          <input id="issue_title" name="issue_title" placeholder="Give this topic a title" type="text" value="" />
          <textarea cols="40" name="body" placeholder="Add more to this topic, using Markdown (click &#x27;Markdown help&#x27; below to learn more)." rows="10"></textarea>
          <input id="reference_url" name="reference_url" placeholder="..." type="text" value="" />
          <input name="synthtree_id" type="hidden" value="" />
          <input name="synthtree_node_id" type="hidden" value="" />
          <input name="sourcetree_id" type="hidden" value="" />
          <input name="ottol_id" type="hidden" value="" />
          <input name="target_node_label" type="hidden" value="" />
          <input name="url" type="hidden" value="/opentree/argus/opentree14.9@ott93302" />
          <div class="msg-footer">
              <a class="msg-close" href="#" style="margin-right: 6px">Close</a>
              <span style="margin-right: 6px"> | </span>
              <a href="https://help.github.com/articles/markdown-basics" style="margin-right: 10px" target="_blank"
                  >Markdown help</a><input class="btn btn-info btn-small" style="" type="submit" value="Post" />
          </div>
      </form>
  </div>
  <ul style="border: 2px dashed orange;">
   {% for thread in threads: %}
    {{ comments.wrap_comment_in_markup(
        comment=thread,
       ) }}
   {% endfor %}
  </ul>
</div>

{# initialize comments with a naive url-based query
# (this will probably be overwritten by tree-view data)
{{ comments.local_comments(
    filter=(feedbackParentWindowURL and 'url' or 'skip_comments'),
    url=(feedbackParentWindowURL or request.url)
  ) }}
#}
